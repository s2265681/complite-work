{"version":3,"sources":["pages/Home.js","pages/Nav.js","pages/Header.js","redux/reducer.js","redux/store.js","redux/action.js","pages/Reducer1.js","pages/Reducer2.js","App.js","serviceWorker.js","index.js"],"names":["Home","Header","className","style","width","class","height","href","to","props","children","initState","count","store","reducer","currentState","observers","dispatch","action","forEach","fn","type","getState","subscript","push","createStore","state","console","log","Reducer1","add","setState","onClick","this","Component","Reducer2","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qOAyBeA,G,YAvBF,WAEX,OACE,4F,cCDW,SAASC,IACpB,OACI,yBAAKC,UAAU,QACX,wBAAIC,MAAO,CAAEC,MAAO,MAApB,gBACA,yBAAKC,MAAM,WAAWF,MAAO,CAAEG,OAAQ,OAAQF,MAAO,UACtD,uBAAGC,MAAM,kBAAkBE,KAAK,KAAhC,gEAGA,wBAAIF,MAAM,iBACR,wBAAIA,MAAM,iBACR,kBAAC,IAAD,CAAMG,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,gBCZD,SAASP,EAAOQ,GAK7B,OACE,6BACI,yBAAKP,UAAU,WALR,GAMP,6BAAMO,EAAMC,W,2CCXdC,EAAY,CACdC,MAAQ,GCACC,ECAc,SAACC,GACxB,IAAIC,EAAe,GACfC,EAAY,GAUhB,SAASC,EAASC,GACdH,EAAeD,EAAQI,EAAOH,GAC9BC,EAAUG,SAAQ,SAAAC,GAAE,OAAEA,OAQ1B,OADAH,EAAS,CAACI,KAAK,WACR,CAAEC,SAhBP,WACE,OAAOP,GAeSE,WAAWM,UAJ/B,SAAmBH,GACfJ,EAAUQ,KAAKJ,KDnBDK,EDGA,SAACP,GAA0B,IAAnBQ,EAAkB,uDAAZf,EAEhC,OADAgB,QAAQC,IAAI,QACLV,EAAOG,MACN,IAAK,MACF,OAAO,eACHK,EADJ,CAECd,MAAMD,EAAUC,UAGpB,QACA,OAAOD,MGVEkB,E,4MACjBH,MAAM,G,EACNI,IAAI,WACAjB,EAAMI,SAAS,CAACI,KAAK,QACrBR,EAAMU,WAAU,WACZI,QAAQC,IAAI,UACZ,EAAKG,SAAS,Q,uDAIlB,OACI,wCAEI,6BACA,4BAAQC,QAASC,KAAKH,KAAtB,OACA,6BACCjB,EAAMS,WAAWV,W,GAhBIsB,aCFjBC,E,uKAEb,OACI,wCACY,6BACPtB,EAAMS,WAAWV,W,GALIsB,aCkCvBE,MAtBf,WAEE,OACE,kBAAC,IAAD,KACE,yBAAKlC,UAAU,OACT,kBAAC,EAAD,MAEJ,yBAAKA,UAAU,WACd,kBAAC,EAAD,KACG,kBAAC,IAAD,CAAOmC,KAAK,IAAIC,OAAK,EAACC,UAAWvC,IACjC,kBAAC,IAAD,CAAOqC,KAAK,YAAYC,OAAK,EAACC,UAAWV,IACzC,kBAAC,IAAD,CAAOQ,KAAK,YAAYC,OAAK,EAACC,UAAWJ,SCdjCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.fd62e77b.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\n// const context = useContext(contextValue)\nconst Home = () => {\n  // const [user,setUser] =\n  return (\n    <div>\n      react hooks， 点击tab切换页面\n     {/** <div>\n        {!user ? (\n          <button onClick={() => setUser(\"你好，你已登陆\")}>\n            登录 <br />\n          </button>\n        ) : (\n          <>\n            user: {user}\n            <br />\n            <button onClick={() => setUser(\"\")}>\n              注销\n            </button>\n          </>\n        )}\n      </div> */}\n    </div>\n  );\n};\nexport default Home;\n","import React from 'react'\nimport '../App.css'\nimport {  Link } from \"react-router-dom\";\n\nexport default function Header() {\n    return (\n        <div className=\"menu\">\n            <h3 style={{ width: 200 }}>导航</h3>\n            <div class=\"dropdown\" style={{ height: \"50px\", width: \"200px\" }}>\n            <a class=\"dropdown-toggle\" href=\"#\">\n              React 和周边主要原理探究\n            </a>\n            <ul class=\"dropdown-menu\">\n              <li class=\"dropdown-item\">\n                <Link to=\"/\">Home</Link>\n                <Link to=\"/Reducer1\">Reducer1</Link>\n                <Link to=\"/Reducer2\">Reducer2</Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n    )\n}\n","import React, { Component, useContext } from \"react\";\n// import loginContext from \"./useContext\";\nimport \"../App.css\";\n\nexport default function Header(props) {\n  // console.log(props, \"props\");\n  const user = true\n  // const { user, setUser } = useContext(loginContext);\n\n  return (\n    <div>\n        <div className=\"header\">{!user?'我是Header,您未登录，请回到Home页登录':user}</div>\n        <div>{props.children}</div>\n    </div>\n  );\n}\n\n","\nconst initState = {\n    count : 0\n}\n\nexport const reducer =(action,state=initState)=>{\n    console.log('type')\n    switch(action.type){\n            case 'add':\n               return {\n                ...state,\n                count:initState.count++\n              }\n            break;\n            default :\n            return initState \n        }\n\n}","import {reducer} from './reducer'\nimport {createStore} from './action'\nexport const store =  createStore(reducer)","\n\nexport const createStore = (reducer)=>{\n    let currentState = {};\n    let observers = []\n\n  \n      // get \n      function getState(){\n        return currentState;\n     }\n\n\n    // set    执行事件\n    function dispatch(action){\n        currentState = reducer(action,currentState)\n        observers.forEach(fn=>fn())\n    }\n\n    // subscript  观察者\n    function subscript(fn){\n        observers.push(fn)\n    }\n    dispatch({type:'%rdtdt'})\n    return { getState , dispatch , subscript}\n}","import React, { Component } from 'react'\n\nimport {store} from '../redux/store'\n\n\nexport default class Reducer1 extends Component {\n    state={}\n    add=()=>{\n        store.dispatch({type:'add'})\n        store.subscript(()=>{\n            console.log('change')\n            this.setState({})\n        })\n    }\n    render() {\n        return (\n            <div>\n                Reducer1\n                <br/>\n                <button onClick={this.add}>add</button>\n                <br/>\n                {store.getState().count}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport {store} from '../redux/store'\n\nexport default class Reducer2 extends Component {\n    render() {\n        return (\n            <div>\n                Reducer2<br/>\n                {store.getState().count}\n            </div>\n        )\n    }\n}\n","import React,{useContext,useState} from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\n\nimport Home from \"./pages/Home\";\n\nimport { HashRouter as Router, Link, Route } from \"react-router-dom\";\nimport Nav from \"./pages/Nav\"\nimport Header from \"./pages/Header\"\nimport Reducer1 from \"./pages/Reducer1\"\nimport Reducer2 from \"./pages/Reducer2\"\n\n//  useContext\n// import loginContext from './pages/useContext'\n\nfunction App() {\n  // const [user,setUser] = useState(null)\n  return (\n    <Router>\n      <div className=\"App\">\n            <Nav/>\n        \n        <div className=\"content\">\n         <Header>\n            <Route path=\"/\" exact component={Home}></Route>\n            <Route path=\"/Reducer1\" exact component={Reducer1}></Route>\n            <Route path=\"/Reducer2\" exact component={Reducer2}></Route>\n\n\n            </Header>\n\n        </div>\n        </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}