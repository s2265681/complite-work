webpackHotUpdate("main",{

/***/ "./webpack-dev-client.js":
/*!*******************************!*\
  !*** ./webpack-dev-client.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("let socket = io(\"/\");\nlet currentHash;\nlet hotCurrentHash; // lastHash 上一次的hash值\nclass Emitter {\n  constructor() {\n    this.listeners = {};\n  }\n  on(type, listener) {\n    this.listeners[type] = listener;\n  }\n  emit(type) {\n    this.listeners[type] && this.listeners[type]();\n  }\n}\nlet hotEmitter = new Emitter();\n\nsocket.on(\"connect\", () => {\n  console.log(\"客户端连接成功\");\n});\n\nsocket.on(\"hash\", (hash) => {\n  currentHash = hash;\n});\n\nsocket.on(\"ok\", () => {\n  debugger;\n  reloadApp(true);\n});\n\nhotEmitter.on(\"webpackHotUpdate\", function () {\n  if (!hotCurrentHash || hotCurrentHash == currentHash) {\n    return (hotCurrentHash = currentHash);\n  }\n  hotCheck();\n});\n\nfunction reloadApp(hot) {\n  if (hot) {\n    // 如果为true，热更新\n    hotEmitter.emit(\"webpackHotUpdate\");\n  } else {\n    // 不支持热更新  直接加载\n    window.location.reload();\n  }\n}\n\n//8.执行hotCheck方法进行更新\nfunction hotCheck() {\n  // 询问服务器 这次编译相对于上一次编译 改变了哪些\n  hotDownloadManifest().then((update) => {\n    let chunkIds = Object.keys(update.c);\n    chunkIds.forEach((chunkId) => {\n      //10. 通过JSONP请求获取到最新的模块代码块\n      hotDownloadUpdateChunk(chunkId);\n    });\n  });\n}\n\n// 拿到变化的文件\nfunction hotDownloadManifest() {\n  return new Promise(function (resolve) {\n    let request = new XMLHttpRequest();\n    let requestPath = \"/\" + hotCurrentHash + \".hot-update.json\";\n    request.open(\"GET\", requestPath, true);\n    request.onreadystatechange = function () {\n      if (request.readyState === 4) {\n        let update = JSON.parse(request.responseText);\n        resolve(update);\n      }\n    };\n    request.send();\n  });\n}\n\nfunction hotDownloadUpdateChunk(chunkId) {\n  var script = document.createElement(\"script\");\n  script.charset = \"utf-8\";\n  // /main.xxx.hot-update.js\n  script.src = \"/\" + chunkId + \".\" + hotCurrentHash + \".hot-update.js\";\n  document.head.appendChild(script);\n}\n//11. 补丁JS取回来后会调用`webpackHotUpdate`方法\n// window.webpackHotUpdate = (chunkId, moreModules) => {\n//   for (let moduleId in moreModules) {\n//     let oldModule = __webpack_require__.c[moduleId]; //获取老模块\n//     let { parents, children } = oldModule; //父亲们 儿子们\n//     var module = (__webpack_require__.c[moduleId] = {\n//       i: moduleId,\n//       l: false,\n//       exports: {},\n//       parents,\n//       children,\n//       hot: window.hotCreateModule(),\n//     });\n//     // 更新为最新\n//     moreModules[moduleId].call(\n//       module.exports,\n//       module,\n//       module.exports,\n//       __webpack_require__\n//     );\n//     module.l = true;\n\n//     parents.forEach((parent) => {\n//       let parentModule = __webpack_require__.c[parent];\n//       parentModule.hot &&\n//         parentModule.hot._acceptedDependencies[moduleId] &&\n//         parentModule.hot._acceptedDependencies[moduleId]();\n//     });\n//     hotCurrentHash = currentHash;\n//   }\n// };\n\n// window.hotCreateModule = () => {\n//   var hot = {\n//     _acceptedDependencies: {}, //接收的依赖\n//     accept: function (dep, callback) {\n//       for (var i = 0; i < dep.length; i++) {\n//         hot._acceptedDependencies[dep[i]] = callback;\n//       }\n//     },\n//   };\n//   return hot;\n// };\n\n\n//# sourceURL=webpack:///./webpack-dev-client.js?");

/***/ })

})